framework:
    messenger:
        # Failure transport for handling failed messages
        failure_transport: failed

        # Middleware configuration
        # DeduplicationMiddleware runs AFTER doctrine_transaction (priority -10)
        # This ensures deduplication INSERT is within the transaction
        default_middleware:
            enabled: true
            allow_no_handlers: false

        buses:
            messenger.bus.default:
                middleware:
                    - doctrine_transaction  # Priority 0 (starts transaction)
                    # DeduplicationMiddleware (priority -10) registered via service tag
                    # Runs after transaction starts, before handlers

        transports:
            outbox:
                dsn: 'doctrine://default?table_name=messenger_outbox&queue_name=outbox'
                serializer: 'Freyr\MessageBroker\Serializer\MessageNameSerializer'
                retry_strategy:
                  max_retries: 3
                  delay: 1000
                  multiplier: 2


            # AMQP transport - external message broker
            # For publishing (outbox) and consuming (inbox)
            amqp:
                dsn: '%env(MESSENGER_AMQP_DSN)%'
                serializer: 'Freyr\MessageBroker\Serializer\MessageNameSerializer'
                options:
                    auto_setup: false
                retry_strategy:
                  max_retries: 3
                  delay: 1000
                  multiplier: 2

            # Failed transport - for all failed messages
            failed:
                dsn: 'doctrine://default?queue_name=failed'
                options:
                    auto_setup: false

        routing:
            # Outbox messages - route domain events to outbox transport
            # Example:
            # 'App\Domain\Event\OrderPlaced': outbox
            # 'App\Domain\Event\UserRegistered': outbox

            # Inbox messages (consumed from AMQP transports)
            # Messages are deserialized by MessageNameSerializer into typed objects
            # DeduplicationMiddleware automatically prevents duplicate processing
            # Handlers execute synchronously (no routing needed - AMQP transport handles delivery)
            # Example handlers:
            # #[AsMessageHandler]
            # class OrderPlacedHandler { public function __invoke(OrderPlaced $message) {} }
